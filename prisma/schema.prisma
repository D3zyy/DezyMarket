// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


//    !!!!!!!!!!§!!!!!! Poznámka je nutné po incializaci vložit do  Roles tabulky roly s name : uzivatel s privilegii 1  a admin  s privilegii 2 !!!!!!!!!!!!!!!!!!!

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Users {
  id                          Int                 @id @default(autoincrement())
  fullName                    String
  nickname                    String?
  email                       String              @unique
  password                    String              @db.VarChar(255)
  dateOfRegistration          DateTime          
  roleId                      Int
  role                        Roles               @relation(fields: [roleId], references: [id])
  bans                        Bans[]
  posts                       Posts[]
  sessions                    Sessions[]
  accountTypes                AccountType[]       // One-to-many relationship with AccountType
  termsOfUseAndPrivatePolicy  Boolean             @default(false)
  verifiedEmail               Boolean             @default(false) // New field to track email verification status
  verificationToken           VerificationTokens? // Optional relation to VerificationToken
  numberOfTries               NumberOfTries?
  postViews                   PostViews[]         // One-to-many relationship with PostViews
  profilePicture              ProfilePicture[]    
  postReport                  PostReport[]
  ipAddresses                 IpAddressesOnUsers[] // Relation to join table
  userRatingsGiven            UserRatings[]       @relation("RatingsGiven")
  userRatingsReceived         UserRatings[]       @relation("RatingsReceived")
}

model UserRatings {
  id           Int      @id @default(autoincrement())
  fromUserId   Int      // Foreign key for the user giving the rating
  toUserId     Int      // Foreign key for the user receiving the rating
  extraInfo    String?  // Optional topic of the rating
  ratedAt      DateTime 
  numberOfStars Int?
  fromUser     Users    @relation("RatingsGiven", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser       Users    @relation("RatingsReceived", fields: [toUserId], references: [id], onDelete: Cascade)

  @@index([fromUserId])
  @@index([toUserId])
}


model ProfilePicture {
  id       Int    @id @default(autoincrement())
  url     String
  userId   Int
  user     Users  @relation(fields: [userId], references: [id], onDelete: Cascade)  // Foreign key for the one-to-many relationship
  @@index([id])
  @@index([userId])
}


model IpAddresses {
  id          Int                 @id @default(autoincrement())
  value       String
  users       IpAddressesOnUsers[] // Relation to join table
}

model IpAddressesOnUsers {
  id          Int          @id @default(autoincrement())
  userId      Int
  ipAddressId Int
  usedForLogin Int          @default(0)
  user        Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipAddress   IpAddresses  @relation(fields: [ipAddressId], references: [id], onDelete: Cascade)

  @@unique([userId, ipAddressId]) // Ensures a unique combination of userId and ipAddressId
  @@index([userId])
  @@index([ipAddressId])
}

model AccountType {
  id       Int    @id @default(autoincrement())
  name     String
  userId   Int
  user     Users  @relation(fields: [userId], references: [id], onDelete: Cascade)  // Foreign key for the one-to-many relationship
  @@index([id])
  @@index([userId])
}


model Sections {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  categoryId  Int         // Cizí klíč na model Categories
  category    Categories   @relation(fields: [categoryId], references: [id], onDelete: Cascade) // Vytvoření vazby na Categories
  posts Posts[]
 @@index([id])
}

model Categories {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  logo        String
  sections    Sections[]   // Odpovídající pole pro vztah
  posts Posts[]
  @@index([id])
}

model Posts {
  id           Int          @id @default(autoincrement())
  name         String       @db.VarChar(150)
  description  String       @db.VarChar(2000)
  price        String       @db.VarChar(100)
  categoryId   Int
  sectionId    Int
  phoneNumber  String       @db.VarChar(9)
  location     String       @db.VarChar(50)
  typeOfPost   String       @db.VarChar(100)
  category     Categories   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  section      Sections     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  images       Image[]      // Define a one-to-many relation
  userId       Int  
  dateAndTime  DateTime     @default(now())
  user         Users        @relation(fields: [userId], references: [id], onDelete: Cascade)
  postViews    PostViews[]  // One-to-many relationship with PostViews
  postReport    PostReport[]  // One-to-many relationship with PostViews
}

model PostReport {
  id           Int      @id @default(autoincrement())
  postId       Int      // Foreign key pointing to Posts
  userId       Int
  topic        String?
  reason       String?  @default("")
  reportedAt   DateTime @default(now()) // Timestamp for when the post was viewed
  post         Posts    @relation(fields: [postId], references: [id], onDelete: Cascade) // Link to Posts table
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade) 
  @@index([postId]) // Ensure there is an index on postId if required
}

model PostViews {
  id           Int      @id @default(autoincrement())
  postId       Int      // Foreign key pointing to Posts
  userId       Int      // Foreign key pointing to Users
  viewedAt     DateTime @default(now()) // Timestamp for when the post was viewed
  post         Posts    @relation(fields: [postId], references: [id], onDelete: Cascade) // Link to Posts table
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // Link to Users table
  
  @@unique([postId, userId])  // Ensure each user can only view a post once (optional)
}
model Image {
  id       Int    @id @default(autoincrement())
  url      String
  postId   Int
  post     Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
}



model NumberOfTries {
  id     Int    @id @default(autoincrement())
  number Int
  round  Int    @default(0)
  userId Int    @unique
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
model VerificationTokens {
  id         Int      @id @default(autoincrement())
  token      String
  expiresAt  DateTime
  userId     Int      @unique
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Roles {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  privileges Int     @default(1)
  users      Users[]
}

model Bans {
  id         Int      @id @default(autoincrement())
  bannedFrom DateTime @default(now())
  bannedTill DateTime? 
  pernament  Boolean @default(false)
  reason     String?
  userId     Int
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sessions {
  id         Int      @id @default(autoincrement())
  sessionId  String   @unique
  userId     Int
  validFrom  DateTime @default(now())
  validTill  DateTime
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // Specify onDelete here
}
