// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Users {
  id                       Int      @id @default(autoincrement())
  fullName                 String
  nickname                 String?
  email                    String   @unique
  password                 String   @db.VarChar(255)
  dateOfRegistration       DateTime @default(now())
  image                    String   @default("default.png")
  roleId                   Int
  role                     Roles    @relation(fields: [roleId], references: [id])
  bans                     Bans[]   // Establish one-to-many relationship with Bans
  sessions                 Sessions[]
  termsOfUseAndPrivatePolicy Boolean @default(false)
  verifiedEmail            Boolean  @default(false) // New field to track email verification status
  verificationToken        VerificationTokens? // Optional relation to VerificationToken
  @@index([email, password])
}
model VerificationTokens {
  id         Int      @id @default(autoincrement())
  token      String
  expiresAt  DateTime
  userId     Int      @unique
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Roles {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  privileges Int     @default(1)
  users      Users[]
}

model Bans {
  id         Int      @id @default(autoincrement())
  bannedFrom DateTime @default(now())
  bannedTill DateTime? 
  pernament  Boolean @default(false)
  userId     Int
  user       Users    @relation(fields: [userId], references: [id])
}

model Sessions {
  id         Int      @id @default(autoincrement())
  sessionId  String   @unique
  userId     Int
  validFrom  DateTime @default(now())
  validTill  DateTime
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // Specify onDelete here
}
