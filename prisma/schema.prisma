// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Users {
  id                       Int              @id @default(autoincrement())
  fullName                 String
  nickname                 String?
  email                    String           @unique
  password                 String           @db.VarChar(255)
  dateOfRegistration       DateTime         @default(now())
  image                    String           @default("default.png")
  roleId                   Int
  role                     Roles            @relation(fields: [roleId], references: [id])
  bans                     Bans[]           // Establish one-to-many relationship with Bans
  sessions                 Sessions[]
  accountTypes             AccountType[]    // One-to-many relationship with AccountType
  termsOfUseAndPrivatePolicy Boolean        @default(false)
  verifiedEmail            Boolean          @default(false) // New field to track email verification status
  verificationToken        VerificationTokens? // Optional relation to VerificationToken
  numberOfTries            NumberOfTries?  
  categories               UserCategories[]
  firstLogin               Boolean          @default(true)
  @@index([email, password])
}

model AccountType {
  id       Int    @id @default(autoincrement())
  name     String
  userId   Int
  user     Users  @relation(fields: [userId], references: [id])  // Foreign key for the one-to-many relationship
  @@index([id])
  @@index([userId])
}


model Sections {
  id          Int         @id @default(autoincrement())
  name        String
  categoryId  Int         // Cizí klíč na model Categories
  category    Categories   @relation(fields: [categoryId], references: [id]) // Vytvoření vazby na Categories
  posts Posts[]
 @@index([id])
}

model Categories {
  id          Int         @id @default(autoincrement())
  name        String
  logo        String
  user        UserCategories[]
  sections    Sections[]   // Odpovídající pole pro vztah
  posts Posts[]
  @@index([id])
}

model Posts {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(150)  // Například pro název
  description String       @db.VarChar(2000) // Pro popis s maximální délkou 2000 znaků
  price       String       @db.VarChar(100)  // Pro cenu, pokud je to také string
  categoryId  Int
  sectionId   Int
  location    String       @db.VarChar(50)  // Například pro lokaci
  typeOfPost  String       @db.VarChar(100)  // Typ příspěvku
  category    Categories    @relation(fields: [categoryId], references: [id])
  section     Sections      @relation(fields: [sectionId], references: [id])
  images      Image[]      // Define a one-to-many relation
}
model Image {
  id       Int    @id @default(autoincrement())
  url      String
  postId   Int
  post     Posts  @relation(fields: [postId], references: [id])
}
model UserCategories {
  userId       Int
  categoryId   Int
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  @@id([userId, categoryId])
}


model NumberOfTries {
  id     Int    @id @default(autoincrement())
  number Int
  round  Int    @default(0)
  userId Int    @unique
  user   Users  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
model VerificationTokens {
  id         Int      @id @default(autoincrement())
  token      String
  expiresAt  DateTime
  userId     Int      @unique
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Roles {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  privileges Int     @default(1)
  users      Users[]
}

model Bans {
  id         Int      @id @default(autoincrement())
  bannedFrom DateTime @default(now())
  bannedTill DateTime? 
  pernament  Boolean @default(false)
  reason     String?
  userId     Int
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sessions {
  id         Int      @id @default(autoincrement())
  sessionId  String   @unique
  userId     Int
  validFrom  DateTime @default(now())
  validTill  DateTime
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade) // Specify onDelete here
}
