require('dotenv').config();  // Naƒç√≠t√°n√≠ promƒõnn√Ωch prost≈ôed√≠ z .env souboru
const { DateTime } = require('luxon');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);

const { execSync } = require('child_process');

async function main() {
  // 0) Z√≠sk√°n√≠ seznamu v≈°ech tabulek v datab√°zi
  console.log("Vymaz√°n√≠ datab√°ze a resetov√°n√≠ identity...");
  execSync('npx prisma migrate reset --force');
  console.log('V≈°echna data byla vymaz√°na a identity byly resetov√°ny!');

  // 2) Spu≈°tƒõn√≠ Prisma p≈ô√≠kaz≈Ø: generate a db push
  console.log("Spu≈°tƒõn√≠ Prisma generate...");
  execSync('npx prisma generate'); // Generuje Prisma klienta

  console.log("Spu≈°tƒõn√≠ Prisma db push...");
  execSync('npx prisma db push'); // Synchronizuje sch√©ma s datab√°z√≠

  // 3) Inicializace rol√≠
  console.log("Inicializace rol√≠...");
  const Roles = [
    { name: 'uzivatel', privileges: 1 },
    { name: 'admin', privileges: 2 },
    { name: 'spravce', privileges: 3 },
    { name: 'majitel', privileges: 4 }
  ];

  for (const role of Roles) {
    await prisma.roles.create({
      data: {
        name: role.name,
        privileges: role.privileges,
      },
    });
  }

  // 4) Inicializace typ≈Ø √∫ƒçt≈Ø
  console.log("Inicializace typ≈Ø √∫ƒçt≈Ø...");
  // v≈ædy u p≈ôedplatn√©ho zdarma u toho base p≈ôedplatn√©ho mus√≠ b√Ωt priority 1
  const accountTypes = [
    { 
      name: 'Z√°kladn√≠', 
      priority: 1, 
      priceAmountCZKMonthly: "0", 
      perks: [
        ["Neomezen√Ω poƒçet inzer√°t≈Ø", true],
        ["a≈æ 15 fotografi√≠ u inzer√°tu", true],
        ["Z√°kladn√≠ typ inzer√°tu", true],
        ["Topov√°n√≠ na hlavn√≠ str√°nce", false],
        ["Topov√°n√≠ v kategorii", false],
        ["Statistika zobrazen√≠ inzer√°tu", false],
        ["Odzn√°ƒçek vedle jm√©na", false],
        ["Prioritn√≠ z√°kaznick√° podpora", false]
      ]
    },
    { 
      name: '≈†ikula', 
      priority: 2, 
      emoji: `<div class="badge badge-lg badge-secondary badge-outline" style="color: #ff7d5c; border-color: #ff7d5c;">≈†ikula</div>`,
      priceAmountCZKMonthly: "134", 
      perks: [
        ["Neomezen√Ω poƒçet inzer√°t≈Ø", true],
        ["a≈æ 20 fotografie u inzer√°tu", true],
        ["≈†ikula inzer√°t", true],
        ["Topov√°n√≠ v kategorii", true],
        ["Odzn√°ƒçek vedle jm√©na", true],
        ["Prioritn√≠ z√°kaznick√° podpora", true],
        ["Topov√°n√≠ na hlavn√≠ str√°nce", false],
        ["Statistika zobrazen√≠ inzer√°tu", false]
      ]
    },
    { 
      name: 'Prof√≠k', 
      emoji: `<div class='badge badge-lg badge-secondary badge-outline' style='color: #c792e9; border-color: #c792e9;'>Prof√≠k</div>`,
      priority: 3, 
      priceAmountCZKMonthly: "152", 
      perks: [
        ["Neomezen√Ω poƒçet inzer√°t≈Ø", true],
        ["a≈æ 25 fotografi√≠ u inzer√°tu", true],
        ["Prof√≠k inzer√°t", true],
        ["Statistika zobrazen√≠ inzer√°tu", true],
        ["Topov√°n√≠ na hlavn√≠ str√°nce", true],
        ["Topov√°n√≠ v kategorii", true],
        ["Odzn√°ƒçek vedle jm√©na", true],
        ["Prioritn√≠ z√°kaznick√° podpora", true]
      ]
    },{ 
      name: 'MegaMan', 
      emoji: `<div class='badge badge-lg badge-secondary badge-outline' style='color: #13bd40; border-color: #13bd40; '>MegaMan</div>`,
      priority: 4, 
      priceAmountCZKMonthly: "251", 
      perks: [
        ["Neomezen√Ω poƒçet inzer√°t≈Ø", true],
        ["a≈æ 25 fotografi√≠ u inzer√°tu", true],
        ["Prof√≠k inzer√°t", true],
        ["Statistika zobrazen√≠ inzer√°tu", true],
        ["Topov√°n√≠ na hlavn√≠ str√°nce", true],
        ["Topov√°n√≠ v kategorii", true],
        ["Odzn√°ƒçek vedle jm√©na", true],
        ["Prioritn√≠ z√°kaznick√° podpora", true]
      ]
    }
  ];
  for (const accountType of accountTypes) {
    // Create the AccountType record
    const accId = await prisma.AccountType.create({
      data: {
        emoji: accountType.emoji,
        name: accountType.name,
        priority: accountType.priority,
      },
    });
  
    // Insert the perks for the created AccountType
    const perksData = accountType.perks.map(perk => ({
      name: perk[0],
      valid: perk[1],
      accId: accId.id,  // Foreign key reference to the created AccountType
    }));
  
    // Create the perks associated with the AccountType
    await prisma.PerksAccount.createMany({
      data: perksData,
    });
  }


  const postTypes = [
    { 
      name: 'Z√°kladn√≠', 
      priority: 1, 
      perks: [
        ["a≈æ 15 fotografi√≠ u inzer√°tu", true],
        ["Doba ulo≈æen√≠ a≈ô 2 mƒõs√≠ce", true],
        ["Poƒçet zobrazen√≠ inzer√°tu", true],
        ["Topovan√Ω v kategorii", true],
        ["Kdo si zobrazil inzer√°t", false],
        ["Topovan√Ω v sekci", false],
      ]
    },
    { 
      name: '≈†ikula', 
      priority: 2, 
      priceAmountCZKMonthly: "88", 
      perks: [
        ["a≈æ 20 fotografi√≠ u inzer√°tu", true],
        ["Doba ulo≈æen√≠ a≈æ 3 mƒõs√≠ce", true],
        ["Poƒçet zobrazen√≠ inzer√°tu", true],
        ["Kdo si zobrazil inzer√°t", true],
        ["Topovan√Ω v kategorii", true],
        ["Topovan√Ω v sekci", true],
      ]
    },
    { 
      name: 'Prof√≠k', 
      priority: 3, 
      priceAmountCZKMonthly: "98", 
      perks: [
        ["a≈æ 25 fotografi√≠ u inzer√°tu", true],
        ["Doba ulo≈æen√≠ a≈æ 4 mƒõs√≠ce", true],
        ["Poƒçet zobrazen√≠ inzer√°tu", true],
        ["Kdo si zobrazil inzer√°t", false],
        ["Topovan√Ω v kategorii", false],
        ["Topovan√Ω v sekci", false],
      ]
    }
  ];


  // Loop through postTypes to create entries in the PostType table
for (const postType of postTypes) {
    // Create a new PostType
    const postTypeId = await prisma.PostType.create({
      data: {
        name: postType.name,
      },
    });
  
    // Insert the perks for the created PostType
    const perksData = postType.perks.map(perk => ({
      name: perk[0],
      valid: perk[1],
      postTypeId: postTypeId.id,  // Foreign key reference to the created PostType
    }));
  
    // Create the perks associated with the PostType
    await prisma.PerksPost.createMany({
      data: perksData,
    });
  }





  const Tops = [
    { 
      name: 'Top',  
      emoji: '&#128204;',
      color: '#ba3d42', // Neutr√°ln√≠ barva pro z√°kladn√≠ top
      numberOfMonthsToValid: 1,
      hidden: false,
    },
    { 
      name: 'Top+', 
      emoji: '&#128171;',
      color: '#f0f018', // Svƒõtlej≈°√≠ ≈°ed√° pro Top+
      numberOfMonthsToValid: 2,
      hidden: false,
    },
    { 
      name: 'Premium Top', 
      emoji: '&#128142;', // Chilli emoji
      color: '#05abab', // ƒåerven√° pro spicy
      numberOfMonthsToValid: 4,
      hidden: false,
    },
    { 
      name: 'Spicy Top', 
      emoji: '&#127798;', // Symbol penƒõz pro deluxe
      color: '#ff2200', // Zlat√°/≈ælut√° pro luxus
      numberOfMonthsToValid: 6,
      hidden: false,
    },
    { 
      name: 'Fire Top', 
      emoji: '&#128293;', // Raketa pro Ultra
      color: '#ff7738', // Modr√° pro ultramodern√≠ vzhled
      numberOfMonthsToValid: 9,
      hidden: false,
    },
    { 
      name: 'Ultimate Top', 
      emoji: '&#128640;', // Hvƒõzda pro Supreme
      color: '#ff8c00', // Oran≈æov√° pro "supreme"
      numberOfMonthsToValid: 12,
      hidden: true,
    },
    { 
      name: 'Legendary Top', 
      emoji: '&#127879', // Koruna pro King
      color: '#d9a891', // Zlat√° pro "king"
      numberOfMonthsToValid: 24,
      hidden: true,
    }
  ];
  for (const top of Tops) {
    await prisma.Tops.create({
      data: {
        name: top.name,
        emoji: top.emoji,
        color: top.color,
        numberOfMonthsToValid: top.numberOfMonthsToValid,
        hidden: top.hidden,
      },
    });
  }
// Nejprve definuj kategorie
const categories = [
    { name: 'Auta', logo: '&#x1F697;' },  // üöó
    { name: 'Elektronika', logo: '&#x1F4BB;' },  // üíª
    { name: 'Pr√°ce', logo: '&#x1F4BC;' },  // üíº
    { name: 'Obleƒçen√≠', logo: '&#x1F457;' },  // üëó
    { name: 'Mobily', logo: '&#x1F4F1;' },  // üì±
    { name: 'Poƒç√≠taƒçe', logo: '&#x1F4BB;' },  // üíª
    { name: 'Zahrada', logo: '&#x1F33F;' },  // üåø
    { name: 'Sport', logo: '&#x26BD;' },  // ‚öΩ
    { name: 'Knihy', logo: '&#x1F4D6;' },  // üìö
    { name: 'Hraƒçky', logo: '&#x1F9F8;' },  // üß∏
    { name: 'N√°bytek', logo: '&#x1F6CB;' },  // üõãÔ∏è
    { name: 'J√≠dlo', logo: '&#x1F35D;' },  // üçù
    { name: 'Bazar', logo: '&#x1F4E6;' },  // üì¶
    { name: 'Hobby', logo: '&#x1F3A4;' },  // üé§
    { name: 'Zv√≠≈ôata', logo: '&#x1F43E;' },  // üêæ
    { name: 'Cestov√°n√≠', logo: '&#x2708;' },  // ‚úàÔ∏è
    { name: 'D≈Øm', logo: '&#x1F3E1;' },  // üè†
    { name: 'Zdrav√≠', logo: '&#x1F489;' },  // üíâ
    { name: 'Auto-moto', logo: '&#x1F697;' },  // üöó
    { name: 'Dƒõtsk√© zbo≈æ√≠', logo: '&#x1F6B6;' },  // üö∂‚Äç‚ôÇÔ∏è
    { name: 'Kancel√°≈ô', logo: '&#x1F4BC;' },  // üíº
    { name: 'M√≥da', logo: '&#x1F457;' },  // üëó
    { name: 'Slu≈æby', logo: '&#x1F3E0;' },  // üè†
    { name: 'Kultura', logo: '&#x1F3AD;' },  // üé≠
    { name: 'R≈Øzn√©', logo: '&#x1F3C6;' },  // üèÜ
    { name: 'Ostatn√≠', logo: '&#x1F6A7;' },  // üöß
    { name: 'Vƒõda', logo: '&#x1F52C;' },  // üî¨
    { name: 'Vzdƒõl√°n√≠', logo: '&#x1F4D6;' },  // üìö
    { name: 'Elektrokola', logo: '&#x1F6B2;' },  // üö≤
  ];
  
  // Vytvo≈ô kategorie v datab√°zi
  const createdCategories = await prisma.categories.createMany({
    data: categories.map(category => ({
      name: category.name,
      logo: category.logo,
    })),
  });
  
  // Sekce, kter√© budou vytvo≈ôeny po z√≠sk√°n√≠ ID kategori√≠
  const sections = [
    { name: 'BMW', categoryName: 'Auta' },
    { name: 'Audi', categoryName: 'Auta' },
    { name: 'Porsche', categoryName: 'Auta' },
    { name: 'Tesla', categoryName: 'Auta' },
    { name: 'Ford', categoryName: 'Auta' },
    { name: 'Chevrolet', categoryName: 'Auta' },
    { name: 'BMW i3', categoryName: 'Auta' },
    { name: 'Mercedes', categoryName: 'Auta' },
    { name: 'Toyota', categoryName: 'Auta' },
    { name: 'Honda', categoryName: 'Auta' },
  
    { name: 'Notebooky', categoryName: 'Elektronika' },
    { name: 'Telefony', categoryName: 'Elektronika' },
    { name: 'Televize', categoryName: 'Elektronika' },
    { name: 'Kamera', categoryName: 'Elektronika' },
    { name: 'Sluch√°tka', categoryName: 'Elektronika' },
    { name: 'Dom√°c√≠ kino', categoryName: 'Elektronika' },
    { name: 'PC komponenty', categoryName: 'Elektronika' },
    { name: 'Herna za≈ô√≠zen√≠', categoryName: 'Elektronika' },
    { name: 'Chytr√© hodinky', categoryName: 'Elektronika' },
    { name: 'Chytr√Ω d≈Øm', categoryName: 'Elektronika' },
  
    { name: 'Realitn√≠ inzerce', categoryName: 'Pr√°ce' },
    { name: 'Inzerce pracovn√≠ch nab√≠dek', categoryName: 'Pr√°ce' },
    { name: 'Voln√° m√≠sta', categoryName: 'Pr√°ce' },
    { name: 'Poradenstv√≠', categoryName: 'Pr√°ce' },
    { name: 'Brig√°dy', categoryName: 'Pr√°ce' },
    { name: '√ö≈ôad pr√°ce', categoryName: 'Pr√°ce' },
    { name: 'Freelance', categoryName: 'Pr√°ce' },
    { name: 'Work-life balance', categoryName: 'Pr√°ce' },
    { name: 'Dohody', categoryName: 'Pr√°ce' },
    { name: 'Fyzick√© pr√°ce', categoryName: 'Pr√°ce' },
  
    { name: 'P√°nsk√° m√≥da', categoryName: 'Obleƒçen√≠' },
    { name: 'D√°msk√° m√≥da', categoryName: 'Obleƒçen√≠' },
    { name: 'Sportovn√≠ obleƒçen√≠', categoryName: 'Obleƒçen√≠' },
    { name: 'L√©to', categoryName: 'Obleƒçen√≠' },
    { name: 'Zimn√≠ obleƒçen√≠', categoryName: 'Obleƒçen√≠' },
    { name: 'Luxusn√≠ m√≥da', categoryName: 'Obleƒçen√≠' },
    { name: 'Tepl√°kov√© soupravy', categoryName: 'Obleƒçen√≠' },
    { name: 'Dopl≈àky', categoryName: 'Obleƒçen√≠' },
    { name: 'Obuv', categoryName: 'Obleƒçen√≠' },
    { name: 'M√≥da pro dƒõti', categoryName: 'Obleƒçen√≠' },
  
    { name: 'Android', categoryName: 'Mobily' },
    { name: 'iPhone', categoryName: 'Mobily' },
    { name: 'Samsung', categoryName: 'Mobily' },
    { name: 'Huawei', categoryName: 'Mobily' },
    { name: 'Xiaomi', categoryName: 'Mobily' },
    { name: 'Sony', categoryName: 'Mobily' },
    { name: 'Nokia', categoryName: 'Mobily' },
    { name: 'Motorola', categoryName: 'Mobily' },
    { name: 'Google Pixel', categoryName: 'Mobily' },
    { name: 'Mobiln√≠ p≈ô√≠slu≈°enstv√≠', categoryName: 'Mobily' },
  ];
  
  // Z√≠sk√°n√≠ v≈°ech kategori√≠ z DB
  const allCategories = await prisma.categories.findMany();
  
  // Vytvo≈ôen√≠ sekc√≠
  for (const section of sections) {
    // Najdeme spr√°vnou kategorii podle n√°zvu
    const category = allCategories.find(cat => cat.name === section.categoryName);
  
    if (category) {
      // Vytvo≈ôen√≠ sekce s p≈ôi≈ôazen√Ωm categoryId
      await prisma.sections.create({
        data: {
          name: section.name,
          categoryId: category.id,  // Pou≈æijeme ID kategorie z DB
        },
      });
    }
  }
  // 5) Vytv√°≈ôen√≠ produkt≈Ø a cen na Stripe
  console.log("Vytv√°≈ôen√≠ produkt≈Ø a cen na Stripe...");
  for (const accountType of accountTypes) {
    try {
      if (accountType.priority === 1) {
        // Pokud m√° prioritu 1, p≈ôid√°me pouze do datab√°ze, ne na Stripe
        const createdPrice = await prisma.prices.create({
          data: {
            value: parseInt(accountType.priceAmountCZKMonthly),
            priceCode: null,  // Pro tento √∫ƒçet nem√°me cenu na Stripe
          },
        });

        const dateAndTime = DateTime.now()
          .setZone('Europe/Prague')
          .toFormat("yyyy-MM-dd'T'HH:mm:ss'+00:00'");

        const accountTypeRecord = await prisma.AccountType.findFirst({
          where: { name: accountType.name },
        });

        await prisma.AccountTypeOnPrices.create({
          data: {
            priceId: createdPrice.id,
            activeFrom: dateAndTime,
            accountTypeId: accountTypeRecord.id,
          },
        });

        console.log(`√öƒçet "${accountType.name}" (priorita 1) byl p≈ôid√°n pouze do datab√°ze s cenou 0.`);
      } else {
        // Pro √∫ƒçty s jinou prioritou
        // 1. Zkontroluj, zda produkt na Stripe existuje
        const existingProducts = await stripe.products.list();
        let productId = null;
        let existingPrice = null;

        // Najdi produkt podle n√°zvu
        const product = existingProducts.data.find(p => p.name === accountType.name);

        if (product) {
          // Pokud produkt existuje, z√≠skej ID produktu
          productId = product.id;

          // Zkontroluj ceny produktu na Stripe
          const prices = await stripe.prices.list({ product: productId });
          existingPrice = prices.data.find(price => price.currency === 'czk');

          if (existingPrice) {
            // Pokud cena existuje a je jin√° ne≈æ po≈æadovan√°
            
          } else {
            // Pokud cena pro produkt neexistuje, vytvo≈ô ji
            console.log(`Produkt "${accountType.name}" nem√° cenu na Stripe. Vytv√°≈ô√≠me novou cenu.`);
            const price = await stripe.prices.create({
                unit_amount: parseInt(accountType.priceAmountCZKMonthly) * 100, // Cena v hal√©≈ô√≠ch (CZK * 100)
                currency: 'czk', // Mƒõna
                product: productId, // ID produktu na Stripe
                recurring: {
                  interval: 'month', // Interval platby (mƒõs√≠ƒçnƒõ)
                },
              });
              
           
            console.log(`Cena pro produkt "${accountType.name}" byla p≈ôid√°na na Stripe.`);
          }
        } else {
          // Pokud produkt neexistuje, vytvo≈ô nov√Ω produkt na Stripe
          const newProduct = await stripe.products.create({
            name: accountType.name,
          });

          productId = newProduct.id;
          console.log(`Produkt "${accountType.name}" byl vytvo≈ôen na Stripe.`);
        }

        // Vytvo≈ô novou cenu v datab√°zi
        const price = await stripe.prices.create({
          unit_amount: parseInt(accountType.priceAmountCZKMonthly) * 100,  // Cena v hal√©≈ô√≠ch (CZK * 100)
          currency: 'czk',  // Mƒõna
          product: productId,  // ID produktu na Stripe
          recurring: {
            interval: 'month',  // Interval platby (mƒõs√≠ƒçnƒõ)
          },
        });

        const createdPrice = await prisma.prices.create({
          data: {
            value: parseInt(accountType.priceAmountCZKMonthly),
            priceCode: price.id,
          },
        });

        const dateAndTime = DateTime.now()
          .setZone('Europe/Prague')
          .toFormat("yyyy-MM-dd'T'HH:mm:ss'+00:00'");

        const accountTypeRecord = await prisma.AccountType.findFirst({
          where: { name: accountType.name },
        });

        await prisma.AccountTypeOnPrices.create({
          data: {
            priceId: createdPrice.id,
            activeFrom: dateAndTime,
            accountTypeId: accountTypeRecord.id,
          },
        });

        console.log(`Produkt "${accountType.name}" byl p≈ôid√°n na Stripe a cena byla aktualizov√°na.`);
      }
    } catch (error) {
      console.error("Chyba p≈ôi vytv√°≈ôen√≠ produktu a ceny na Stripe:", error);
    }
  }

  console.log('Inicializace byla √∫spƒõ≈°n√°!');
}

main()
  .catch(e => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });